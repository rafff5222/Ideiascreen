import { useState, useEffect } from 'react';
import { useLocation } from 'wouter';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { ArrowRight, Check, Gift } from "lucide-react";

/**
 * Sequ√™ncia de Upsell Automatizada (Sistema de 3 etapas)
 * - Etapa 1: Oferta imediata ap√≥s compra (hashtags virais)
 * - Etapa 2: Acesso VIP a templates (mostrado ap√≥s o primeiro, ou 2 dias depois)
 * - Etapa 3: Curso de edi√ß√£o profissional (√∫ltima oferta)
 */
export default function UpsellModal() {
  const [open, setOpen] = useState(false);
  const [location] = useLocation();
  const [upsellStep, setUpsellStep] = useState(1);
  const [hasSeenUpsell, setHasSeenUpsell] = useState(false);
  
  useEffect(() => {
    // Verifica se o usu√°rio est√° na p√°gina de agradecimento
    const isThankYouPage = location.includes('/obrigado') || 
                          location.includes('/success') || 
                          location.includes('/thank-you');
    
    // Verifica se j√° viu o upsell antes
    const upsellHistory = localStorage.getItem('upsellHistory');
    
    if (isThankYouPage) {
      // Apenas mostra se for a primeira vez vendo a p√°gina de agradecimento
      if (!upsellHistory) {
        // Atrasa a exibi√ß√£o para dar tempo de ler a mensagem principal
        const timer = setTimeout(() => {
          setOpen(true);
          setUpsellStep(1); // Come√ßa pela primeira oferta
          localStorage.setItem('upsellHistory', JSON.stringify({
            firstSeen: new Date().toISOString(),
            lastStep: 1
          }));
        }, 5000);
        
        return () => clearTimeout(timer);
      } else {
        // Se j√° viu antes, verifica qual foi a √∫ltima etapa
        try {
          const history = JSON.parse(upsellHistory);
          // Se j√° viu a etapa 1 mas n√£o a 2, mostra a etapa 2
          if (history.lastStep === 1) {
            const timer = setTimeout(() => {
              setOpen(true);
              setUpsellStep(2);
              history.lastStep = 2;
              localStorage.setItem('upsellHistory', JSON.stringify(history));
            }, 3000);
            
            return () => clearTimeout(timer);
          }
          // Se j√° viu a etapa 2 mas n√£o a 3, mostra a etapa 3
          else if (history.lastStep === 2) {
            const timer = setTimeout(() => {
              setOpen(true);
              setUpsellStep(3);
              history.lastStep = 3;
              localStorage.setItem('upsellHistory', JSON.stringify(history));
            }, 3000);
            
            return () => clearTimeout(timer);
          }
        } catch (e) {
          console.error('Erro ao processar hist√≥rico de upsell:', e);
        }
      }
    } else {
      // Se n√£o est√° na p√°gina de agradecimento mas tem hist√≥rico
      // verifica se j√° passou 2 dias desde a √∫ltima visita
      if (upsellHistory) {
        try {
          const history = JSON.parse(upsellHistory);
          const firstSeen = new Date(history.firstSeen);
          const twoDaysLater = new Date(firstSeen);
          twoDaysLater.setDate(twoDaysLater.getDate() + 2);
          
          if (new Date() > twoDaysLater && history.lastStep < 3) {
            // Passou 2 dias e n√£o viu todas as ofertas
            const timer = setTimeout(() => {
              setOpen(true);
              setUpsellStep(history.lastStep + 1);
              history.lastStep += 1;
              localStorage.setItem('upsellHistory', JSON.stringify(history));
            }, 10000); // Mostra ap√≥s 10 segundos na sess√£o
            
            return () => clearTimeout(timer);
          }
        } catch (e) {
          console.error('Erro ao processar hist√≥rico de upsell:', e);
        }
      }
    }
  }, [location]);
  
  const handleAccept = () => {
    // Processa a compra do upsell atual
    console.log(`Upsell ${upsellStep} accepted!`);
    
    // Diferentes URLs de checkout dependendo do upsell
    const checkoutURLs: Record<number, string> = {
      1: '/checkout/hashtags-virais',
      2: '/checkout/templates-vip',
      3: '/checkout/curso-edicao'
    };
    
    // Redireciona para a p√°gina de checkout espec√≠fica
    window.location.href = checkoutURLs[upsellStep];
    setOpen(false);
  };
  
  const handleReject = () => {
    console.log(`Upsell ${upsellStep} rejected`);
    setOpen(false);
  };

  // Conte√∫do din√¢mico baseado na etapa atual
  const upsellContent: Record<number, {
    title: string;
    color: string;
    description: React.ReactNode;
    acceptText: string;
    acceptColor: string;
  }> = {
    // Etapa 1: Hashtags Virais
    1: {
      title: "üéÅ Quer 100 Hashtags Virais por apenas R$9,90?",
      color: "from-purple-600 to-pink-500",
      description: (
        <>
          <p className="mb-4">
            <span className="font-bold text-black">Parab√©ns pela sua compra!</span> Que tal aumentar ainda mais seu alcance?
          </p>
          
          <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4 mb-4">
            <h4 className="font-bold text-xl mb-2 text-black">Pacote Hashtag Viral</h4>
            <p className="mb-1">‚úÖ 100+ hashtags otimizadas por nicho</p>
            <p className="mb-1">‚úÖ Guia de timing perfeito para postagens</p>
            <p className="mb-1">‚úÖ Acesso ao grupo VIP de criadores</p>
            
            <div className="flex items-center mt-4">
              <span className="line-through text-gray-500 mr-2">R$ 97</span>
              <span className="bg-red-500 text-white text-xs px-2 py-1 rounded">90% OFF</span>
              <span className="text-xl font-bold ml-2 text-black">R$ 9,90</span>
            </div>
          </div>
          
          <p className="text-sm text-gray-500 italic">Esta oferta √© v√°lida apenas agora e n√£o estar√° dispon√≠vel posteriormente.</p>
        </>
      ),
      acceptText: "SIM, QUERO BOMBAR MINHAS REDES! üöÄ",
      acceptColor: "from-green-500 to-green-600"
    },
    
    // Etapa 2: Templates Premium
    2: {
      title: "üîì Acesso VIP a 200 templates por R$29/m√™s",
      color: "from-blue-600 to-cyan-500",
      description: (
        <>
          <p className="mb-4">
            <span className="font-bold text-black">Oferta Exclusiva!</span> Para voc√™ que j√° √© nosso cliente:
          </p>
          
          <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-4">
            <h4 className="font-bold text-xl mb-2 text-black">Clube VIP de Templates</h4>
            <p className="mb-1">‚úÖ 200+ templates profissionais atualizados mensalmente</p>
            <p className="mb-1">‚úÖ Categorias espec√≠ficas para cada plataforma</p>
            <p className="mb-1">‚úÖ Personaliz√°veis em 1-clique para sua marca</p>
            <p className="mb-1">‚úÖ Prioridade no suporte t√©cnico</p>
            
            <div className="flex items-center mt-4">
              <span className="line-through text-gray-500 mr-2">R$ 97/m√™s</span>
              <span className="bg-red-500 text-white text-xs px-2 py-1 rounded">70% OFF</span>
              <span className="text-xl font-bold ml-2 text-black">R$ 29/m√™s</span>
            </div>
          </div>
          
          <p className="text-sm text-gray-500 italic">Voc√™ pode cancelar a qualquer momento. Oferta v√°lida por 48h.</p>
        </>
      ),
      acceptText: "QUERO ACESSO VIP AGORA ‚ú®",
      acceptColor: "from-blue-500 to-blue-600"
    },
    
    // Etapa 3: Curso de Edi√ß√£o Profissional
    3: {
      title: "üé¨ Curso de Edi√ß√£o Profissional com 50% OFF",
      color: "from-orange-500 to-amber-500",
      description: (
        <>
          <p className="mb-4">
            <span className="font-bold text-black">√öltima Chance!</span> Aprenda a editar como um profissional:
          </p>
          
          <div className="bg-orange-50 border border-orange-200 rounded-lg p-4 mb-4">
            <h4 className="font-bold text-xl mb-2 text-black">Masterclass de Edi√ß√£o</h4>
            <p className="mb-1">‚úÖ 12 aulas completas com exerc√≠cios pr√°ticos</p>
            <p className="mb-1">‚úÖ Acesso vital√≠cio ao conte√∫do e atualiza√ß√µes</p>
            <p className="mb-1">‚úÖ 50+ efeitos e transi√ß√µes prontas</p>
            <p className="mb-1">‚úÖ Certificado de conclus√£o</p>
            
            <div className="flex items-center mt-4">
              <span className="line-through text-gray-500 mr-2">R$ 397</span>
              <span className="bg-red-500 text-white text-xs px-2 py-1 rounded">50% OFF</span>
              <span className="text-xl font-bold ml-2 text-black">R$ 197</span>
            </div>
          </div>
          
          <div className="flex items-center gap-2 mt-4 bg-green-50 p-3 rounded-lg">
            <div className="flex-shrink-0 w-8 h-8 bg-green-100 rounded-full flex items-center justify-center">
              <Gift className="w-4 h-4 text-green-600" />
            </div>
            <p className="text-sm text-green-800">
              <strong>B√îNUS:</strong> 5 licen√ßas de m√∫sica sem royalties para seus v√≠deos!
            </p>
          </div>
        </>
      ),
      acceptText: "QUERO VIRAR UM EDITOR PROFISSIONAL üé•",
      acceptColor: "from-orange-500 to-red-600"
    }
  };
  
  // Conte√∫do atual baseado na etapa
  const currentContent = upsellContent[upsellStep];

  return (
    <Dialog open={open} onOpenChange={setOpen}>
      <DialogContent className="max-w-md mx-auto bg-white p-0 rounded-lg overflow-hidden">
        <div className={`w-full bg-gradient-to-r ${currentContent.color} py-3 px-4`}>
          <DialogTitle className="text-xl text-white font-bold flex items-center gap-2">
            {currentContent.title}
          </DialogTitle>
        </div>
        
        <div className="p-6">
          <DialogDescription className="text-gray-700 mb-6 text-base">
            {currentContent.description}
          </DialogDescription>
          
          <DialogFooter className="flex flex-col sm:flex-row gap-3">
            <Button 
              className={`bg-gradient-to-r ${currentContent.acceptColor} hover:brightness-110 text-white font-bold w-full py-6 text-lg`}
              onClick={handleAccept}
            >
              {currentContent.acceptText}
            </Button>
            
            <Button 
              variant="outline" 
              className="text-gray-500 hover:text-gray-700 w-full"
              onClick={handleReject}
            >
              N√£o, obrigado
            </Button>
          </DialogFooter>
        </div>
      </DialogContent>
    </Dialog>
  );
}